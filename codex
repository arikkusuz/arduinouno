#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define trigPin A0 
#define echoPin A1 

LiquidCrystal_I2C lcd(0x27, 16, 2);

unsigned long startTime = 0;
unsigned long pauseTime = 0;
unsigned long totalPausedTime = 0;
unsigned long lastSessionTime = 0;
unsigned long lastDetectionTime = 0;
bool timerRunning = false;
bool timerPaused = false;

const int MAX_DISTANCE_CM = 50;
const int PRESENCE_DISTANCE_CM = 30;  
const unsigned long PAUSE_TIMEOUT = 13000;

void setup() {
  Serial.begin(9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  lcd.init();
  lcd.backlight();
  lcd.clear();
  
  lcd.setCursor(0,0);
  lcd.print("Timer Table SYS");
  lcd.setCursor(0,1);
  lcd.print("G12 - ABM 06");
  delay(2000);
  lcd.clear();
}

void loop() {
  long distance = measureDistance();
  
  if (distance > 0 && distance <= PRESENCE_DISTANCE_CM) {
    lastDetectionTime = millis();
    
    if (!timerRunning) {
      startTimer();
    } 
    
    if (timerPaused) {
      resumeTimer();
    }
  } else {
    if (timerRunning && !timerPaused) {
      pauseTimer();
    }
    
    if (timerPaused && (millis() - pauseTime > PAUSE_TIMEOUT)) {
      resetTimer();
    }
  }
  
  displayTimerAndDistance(distance);
  
  delay(200);
}

long measureDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  long duration = pulseIn(echoPin, HIGH);
  long distanceCm = (duration/2) / 29.1;
  
  return (distanceCm > 0 && distanceCm <= MAX_DISTANCE_CM) ? distanceCm : 0;
}

void startTimer() {
  startTime = millis();
  timerRunning = true;
  timerPaused = false;
  totalPausedTime = 0;
  
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Student Detected");
  lcd.setCursor(0,1);
  lcd.print("Timer Started");
  delay(1500);
}

void pauseTimer() {
  pauseTime = millis();
  timerPaused = true;
}

void resumeTimer() {
  totalPausedTime += (millis() - pauseTime);
  timerPaused = false;
}

void resetTimer() {
  if (timerRunning) {
    lastSessionTime = timerPaused 
      ? (pauseTime - startTime - totalPausedTime)
      : (millis() - startTime - totalPausedTime);
  } else {
    lastSessionTime = 0;
  }
  
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Last Session:");
  
  unsigned long seconds = lastSessionTime / 1000;
  unsigned long minutes = seconds / 60;
  seconds %= 60;
  
  lcd.setCursor(0,1);
  lcd.print("Time: ");
  if (minutes < 10) lcd.print("0");
  lcd.print(minutes);
  lcd.print(":");
  if (seconds < 10) lcd.print("0");
  lcd.print(seconds);
  
  delay(3000);
  
  startTime = 0;
  pauseTime = 0;
  totalPausedTime = 0;
  timerRunning = false;
  timerPaused = false;
  
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Timer Reset");
  lcd.setCursor(0, 1);
  lcd.print("No Object Detected");
  delay(1000);
}

void displayTimerAndDistance(long distance) {
  if (!timerRunning) return;
  
  unsigned long currentTimer = timerPaused 
    ? (pauseTime - startTime - totalPausedTime)
    : (millis() - startTime - totalPausedTime);
  
  unsigned long seconds = currentTimer / 1000;
  unsigned long minutes = seconds / 60;
  seconds %= 60;
  
  lcd.clear();
  
  lcd.setCursor(0,0);
  lcd.print("Time: ");
  if (minutes < 10) lcd.print("0");
  lcd.print(minutes);
  lcd.print(":");
  if (seconds < 10) lcd.print("0");
  lcd.print(seconds);
  
  lcd.setCursor(0,1);
  lcd.print("Dist:");
  lcd.print(distance);
  lcd.print("cm ");
  lcd.print(timerPaused ? "| Pause" : "| Run");
}
